name: CMake
on:
  push: 
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 1 * * *'

jobs:

  build_and_test:
    name: >
      Build and test a debug version of SRE on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        include:
          - os: ubuntu-latest
            target: Linux
          - os: macos-latest
            target: Macos
          - os: windows-latest
            target: Windows

    steps:

    - name: Set XDG_RUNTIME_DIR
      run: echo "XDG_RUNTIME_DIR=/run/user/$UID" >> $GITHUB_ENV 

    - name: Cache sdl2 dependencies
      if: ${{ matrix.os == 'macos-latest' }}
      uses: actions/cache@v2
      id: caching_worked
      with:
        path: |
          ~/.sdl2
          ~/.sdl2_image
          ~/.ccache
        key: ${ { matrix.os.name } }-ccache-${ { steps.ccache_cache_timestamp.outputs.timestamp } }

        restore-keys: |
          ${{ runner.OS }}-ccache-
          
    - name: install_sdl2 macos
      if: ${{ matrix.os == 'macos-latest' }}
      run:  brew install sdl2 sdl2_image

    - name: install_sdl2 ubuntu
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: | 
        sudo apt update  
        sudo apt-get install libsdl2-dev
        sudo apt-get install libsdl2-image-dev
        sudo apt-get install libglew-dev

    - name: install_ccache macos
      if: ${{ matrix.os == 'macos-latest' }}
      run: brew install ccache

    - name: install_ccache ubuntu
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: sudo apt install ccache
      
    - name: 'Setup MSYS2'
      if: ${{ matrix.os == 'windows-latest' }}      
      uses: msys2/setup-msys2@v2

    - name: install dependencies windows mingw toolchain
      if: ${{ matrix.os == 'windows-latest' }}
      shell: msys2 {0}
      run: |
        pacman -Sy --needed base-devel mingw-w64-x86_64-toolchain  --noconfirm
        pacman -S mingw-w64-x86_64-ninja --noconfirm
        pacman -S mingw-w64-x86_64-ccache --noconfirm

    - name: install dependencies windows glew
      if: ${{ matrix.os == 'windows-latest' }}
      shell: msys2 {0}
      run: |
        pacman -S mingw-w64-x86_64-glew --noconfirm

    - name: install dependencies windows cmake
      if: ${{ matrix.os == 'windows-latest' }}
      shell: msys2 {0}
      run: |
        pacman -S mingw-w64-x86_64-cmake --noconfirm

    - name: install dependencies windows qt6
      if: ${{ matrix.os == 'windows-latest' }}
      shell: msys2 {0}
      run: |
        pacman -S mingw-w64-x86_64-qt6  --noconfirm

    - name: install dependencies sdl2 windows
      if: ${{ matrix.os == 'windows-latest' }}
      shell: msys2 {0}
      run: |
        pacman -S mingw-w64-x86_64-SDL2 --noconfirm 
        pacman -Qi mingw-w64-x86_64-SDL2
        pacman -Qk mingw-w64-x86_64-SDL2
        pacman -Ql mingw-w64-x86_64-SDL2

    - name: install dependencies sdl2_image windows
      if: ${{ matrix.os == 'windows-latest' }}
      shell: msys2 {0}
      run: |
        pacman -S mingw-w64-x86_64-SDL2_image --noconfirm
        pacman -Qi mingw-w64-x86_64-SDL2_image
        pacman -Qk mingw-w64-x86_64-SDL2_image
        pacman -Ql mingw-w64-x86_64-SDL2_image

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Checkout submodules
      run: git submodule update --init --recursive

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")

    - name: ccache cache files
      uses: actions/cache@v2
      with:
        path: |
          .ccache
          .sdl2
          .sdl2_image
        key: ${ { matrix.os } }-ccache-${ { steps.ccache_cache_timestamp.outputs.timestamp } }
        restore-keys: |
            ${ { matrix.os } }-ccache-

    - name: Configure CMake linux 
      if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
      shell: cmake -P {0}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only
      # required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        execute_process(
           COMMAND cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Debug -DINSTALL_GTEST=ON -DUSE_SRE_TEST_AND_UTILS:BOOL=ON -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
        )

    - name: Configure CMake windows 
      if: ${{ matrix.os == 'windows-latest' }}
      shell: msys2 {0}
      run: |
        cd ..
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DINSTALL_GTEST=ON -DUSE_SRE_TEST_AND_UTILS:BOOL=ON -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache -D CMAKE_FIND_DEBUG_MODE=ON ../SimpleRenderEngine

    - name: Build linux 
      # Build your pogram with the given configuration
      if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
      shell: cmake -P {0}
      run: |
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
        set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
        set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
        set(ENV{CCACHE_COMPRESS} "true")
        set(ENV{CCACHE_COMPRESSLEVEL} "6")
        set(ENV{CCACHE_MAXSIZE} "400M")
        execute_process(
          COMMAND cmake --build ${{github.workspace}}/build --config Debug -j8
        )

    - name: Build windows
      # Build your pogram with the given configuration
      if: ${{ matrix.os == 'windows-latest' }}
      shell: msys2 {0}
      run: |
        pwd
        cd ../build
        pwd 
        ls -l
        cmake --build .

    - name: ccache statistics
      shell: cmake -P {0}
      run: |
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
        set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
        set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
        execute_process(COMMAND ccache -s)

    - name: Test Linux
      if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more
      # detail
      run: |
        ctest --output-on-failure -R unit

    - name: Test Windows
      if: ${{ matrix.os == 'windows-latest' }}
      shell: msys2 {0}
      run: |
        cd ../build 
        ctest --output-on-failure -R unit

